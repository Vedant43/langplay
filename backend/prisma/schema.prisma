generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  username           String              @unique
  password           String
  channelName        String?             @unique 
  coverPicture       String?
  description        String?
  profilePicture     String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  subscribers        ChannelEngagement[] @relation("subscribers")
  subscribedTo       ChannelEngagement[] @relation("subscriptions")
  comments           Comment[]
  commentEngagements CommentEngagement[]
  community          Community[]
  communityLikes     CommunityLikes[]
  playList           Playlist[]
  videos             Video[]
  videoEngagement    VideoEngagement[]
}

model Video {
  id              Int               @id @default(autoincrement())
  title           String            @unique
  description     String?
  videoUrl        String
  thumbnailUrl    String
  views           Int               @default(0)
  isPublished     Boolean           @default(false) 
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          Int?
  videoPublicId   String?
  language        Language          @default(ENGLISH)
  source          String            @default("user")
  comments        Comment[]
  Playlist_videos Playlist_videos[]
  user            User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoEngagement VideoEngagement[]
}

model VideoEngagement {
  videoId        Int
  userId         Int
  engagementType Engagement
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  video          Video      @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, userId])
}

model Playlist {
  id        Int               @id @default(autoincrement())
  name      String
  type      PlaylistType?     @default(USER_CREATED)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    Int
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos    Playlist_videos[]
}

model Playlist_videos {
  videoId   Int
  playlistId Int
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  Video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([playlistId, videoId])
}

model Community {
  id             Int              @id @default(autoincrement())
  userId         Int
  title          String
  content        String
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityLikes CommunityLikes[]
}

model CommunityLikes {
  communityId Int
  userId      Int
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communityId, userId])
}

model Comment {
  id         Int                 @id @default(autoincrement())
  content    String
  createdAt  DateTime            @default(now())
  videoId    Int
  userId     Int
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  video      Video               @relation(fields: [videoId], references: [id], onDelete: Cascade)
  engagement CommentEngagement[]
}

model CommentEngagement {
  commentId Int
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model ChannelEngagement {
  channelId    Int
  subscriberId Int
  createdAt    DateTime @default(now())
  channel      User     @relation("subscribers", fields: [channelId], references: [id], onDelete: Cascade)
  subscriber   User     @relation("subscriptions", fields: [subscriberId], references: [id], onDelete: Cascade)

  @@unique([channelId, subscriberId])
}

enum Engagement {
  LIKE
  DISLIKE
}

enum PlaylistType {
  LIKED_VIDEO
  WATCH_LATER
  HISTORY
  USER_CREATED 
}

enum Language {
  ENGLISH
  HINDI
  JAPANESE
  FRENCH
  SPANISH
  CHINESE
  GERMAN
}

// npx prisma db push to update schema
// npx prisma migrate dev to migrate